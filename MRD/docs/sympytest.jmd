---
title: Mechanikai rendszerek dinamikája
author: Cserteg Tamás
date: 2018.04.28.
---


# Introduction


This an example of a julia script that can be published using
[Weave](http://mpastell.github.io/Weave.jl/latest/usage/).
The script can be executed normally using Julia
or published to HTML or pdf with Weave.
Text is written in markdown in lines starting with "`#'` " and code
is executed and results are included in the published document.


## Mágyárúl bészőlűnk


Hogyan bírod a magyar nyelvet? Árvíztűrő tükörfúrógép:

```julia; echo=true
using SymPy
using LinearAlgebra
```

Ezzel a kóddal buildelheted:
```julia; eval=false
using Weave
weave("sympytest.jmd", doctype = "md2tex",template = "custom.tpl")
```

## 1. feladat


### Setup

~~~~{.julia}
# DH matrix
function DH(α, a, d, θ)
    [cos(θ) -sin(θ) 0 a;
    cos(α)*sin(θ) cos(α)*cos(θ) -sin(α) -d*sin(α);
    sin(α)*sin(θ) sin(α)*cos(θ) cos(α) d*cos(α);
    0 0 0 1]
end
~~~~~~~~~~~~~




~~~~{.julia}
# Mechanism parameters
l10_ = Sym(8//10); #m
l11_ = Sym(6//10); #m
l2_ = Sym(3//10); #m
rhoA_ = Sym(60); #kg/m
m_ = Sym(5); #kg
IE_ = Sym(1); #MNm^2

g_ = Sym(981//100); # m/s^2
~~~~~~~~~~~~~



~~~~{.julia}
# just for shorter Sym(0)-s
_0 = Sym(0);
~~~~~~~~~~~~~



~~~~{.julia}
# Symbolic variables
@vars q1 q2 l10 l11 l2
~~~~~~~~~~~~~


~~~~{.julia}
@vars rhoA m IE m10 m11 m2 m20 g
~~~~~~~~~~~~~



~~~~{.julia}
# For derivatives
@vars t
q1t = SymFunction("q1");
q2t = SymFunction("q2");
~~~~~~~~~~~~~



~~~~{.julia}
function ssub(A, x1, x2)
    x1f = x1.from
    x1t = x1.to
    x2f = x2.from
    x2t = x2.to
    return A.subs(x1f, x1t).subs(x2f, x2t)
end
~~~~~~~~~~~~~



~~~~{.julia}
x1t = (from = q1, to = q1t(t))
x2t = (from = q2, to = q2t(t))
t1x = (from = q1t(t), to = q1)
t2x = (from = q2t(t), to = q2)
dt1 = (from = q1t'(t), to = Sym(1))
dt2 = (from = q2t'(t), to = Sym(1))
~~~~~~~~~~~~~




~~~~{.julia}
function d(A, x)
    A_ = deepcopy(A)
    for i in eachindex(A)
        A_[i] = diff(A[i], x)
    end
    A_
end
~~~~~~~~~~~~~



~~~~{.julia}
function simpl(A)
    A_ = deepcopy(A)
    for i in eachindex(A)
        A_[i] = simplify(A[i])
    end
    A_
end
~~~~~~~~~~~~~



~~~~{.julia}
J(V, x1, x2) = hcat(Sym[diff(V[i], x1) for i in 1:3], Sym[diff(V[i], x2) for i in 1:3])
~~~~~~~~~~~~~



~~~~{.julia}
function steiner(m, x,y,z)
    m*[y^2+z^2 -x*y -x*z;
    -y*x x^2+z^2 -y*z;
    -z*x -z*y x^2+y^2]
end
~~~~~~~~~~~~~


~~~~{.julia}
function steiner(m,v)
    steiner(m, v[1], v[2], v[3])
end
~~~~~~~~~~~~~



### DH paraméterek

~~~~{.julia}
# first joint
α1 = _0; a1 = _0; d1 = l10; θ1 = PI/2+q1;
# second joint
α2 = -PI/2; a2 = l11; d2 = _0; θ2 = q2;
# E TCP
α3 = PI/2; a3 = _0; d3 = l2; θ3 = -PI/2;
~~~~~~~~~~~~~



~~~~{.julia}
_0T1 = DH(α1, a1, d1, θ1)
~~~~~~~~~~~~~





~~~~{.julia}
_1T2 = DH(α2, a2, d2, θ2)
~~~~~~~~~~~~~





~~~~{.julia}
_2TTCP = DH(α3, a3, d3, θ3)
~~~~~~~~~~~~~




### Direkt kinematika

~~~~{.julia}
_2rTCP = [0, -l2, 0, 1]
~~~~~~~~~~~~~



~~~~{.julia}
_0rTCP = _0T1 * _1T2 * _2rTCP
~~~~~~~~~~~~~



~~~~{.julia}
_0rTCP_check = _0T1 * _1T2 * _2TTCP * [0,0,0,1]
~~~~~~~~~~~~~



~~~~{.julia}
_0rTCP_check == _0rTCP
~~~~~~~~~~~~~




~~~~{.julia}
# Hasznos mátrixok
_0T2 = _0T1 * _1T2;
~~~~~~~~~~~~~




### Inverz kinematika


`_0rTCP` - ből


### J_E Jacobi-mátrix

~~~~{.julia}
J_E = J(_0rTCP, q1, q2)
~~~~~~~~~~~~~





### Forgatási tengely és szög

~~~~{.julia}
_0TTCP = _0T1 * _1T2 * _2TTCP
~~~~~~~~~~~~~




~~~~{.julia}
_0RTCP_q20 = _0TTCP.subs(q2, Sym(0))[1:3, 1:3]
~~~~~~~~~~~~~


## 2. feladat


## Tömegek

~~~~{.julia}
m10_ = rhoA_*l10_;
m11_ = rhoA_*l11_;
m1_ = rhoA_*(l10_+l11_);
m20_ = rhoA_*l2_;
m2_ = m20_+m_;
~~~~~~~~~~~~~




#### Sebesség Jacobi

~~~~{.julia}
# rúd10
_1r01 = [_0, _0, -l10/2, Sym(1)];
# rúd11
_1r11 = [l11/2, _0, _0, Sym(1)];
# rúd2
_2r2 = [_0, -l2/2, _0, Sym(1)];
# m tömeg
_2rm = [_0, -l2, _0, Sym(1)];
~~~~~~~~~~~~~



~~~~{.julia}
# transzformálás 0-s kr-be és összegzés a tagokra
_1rrud1 = (m10_*_1r01+m11_*_1r11)/m1_;
_0rrud1 = _0T1*_1rrud1;
_2rrud2 = (m20_*_2r2+m_*_2rm)/m2_;
_0rrud2 = _0T2*_2rrud2;
~~~~~~~~~~~~~



~~~~{.julia}
_0Jrs1 = J(_0rrud1, q1, q2);
N0Jrs1 = _0Jrs1.subs(l11, l11_);
N0Jrs1.evalf(4)
~~~~~~~~~~~~~



~~~~{.julia}
_0Jrs2 = J(_0rrud2, q1, q2);
N0Jrs2 = _0Jrs2.subs(l11, l11_).subs(l2, l2_);
N0Jrs2.evalf(5)
~~~~~~~~~~~~~




#### Szögsebesség Jacobi


##### ω1

~~~~{.julia}
_0R1 = _0T1[1:3,1:3];
_0R1t = ssub(_0R1, x1t, x2t)
~~~~~~~~~~~~~





~~~~{.julia}
_0R1d = d(_0R1t, t)
~~~~~~~~~~~~~



~~~~{.julia}
_0ωx1 = _0R1d * permutedims(_0R1t);
_ω1 = [_0ωx1[3,2], _0ωx1[1,3], _0ωx1[2,1]];
~~~~~~~~~~~~~



~~~~{.julia}
_0Jω1 = simpl(J(_ω1, q1t'(t), q2t'(t)));
_0Jω1nt = ssub(_0Jω1, t1x, t2x)
~~~~~~~~~~~~~


##### ω2

~~~~{.julia}
_0R2 = _0T2[1:3,1:3];
_0R2t = ssub(_0R2,x1t, x2t)
~~~~~~~~~~~~~




~~~~{.julia}
_0R2d = d(_0R2t, t);
simpl(_0R2d)
~~~~~~~~~~~~~


~~~~{.julia}
_0ωx2 = _0R2d * permutedims(_0R2t);
_ω2 = [_0ωx2[3,2], _0ωx2[1,3], _0ωx2[2,1]];
simpl(_ω2)
~~~~~~~~~~~~~


~~~~{.julia}
_0Jω2 = simpl(J(_ω2, q1t'(t), q2t'(t)));
_0Jω2nt = ssub(_0Jω2, t1x, t2x)
~~~~~~~~~~~~~



### Tehetetlenségi nyomatékok


#### 1-es test

~~~~{.julia}
_1th10 = m10*[Sym(1//12)*l10^2 _0 _0;
            _0 Sym(1//12)*l10^2 _0;
            _0 _0 _0]
~~~~~~~~~~~~~




~~~~{.julia}
_1th10s = steiner(m10, _1r01-_1rrud1)
~~~~~~~~~~~~~





~~~~{.julia}
_1th11 = m11*[_0 _0 _0;
            _0 Sym(1//12)*l11^2 _0;
            _0 _0 Sym(1//12)*l11^2]
~~~~~~~~~~~~~





~~~~{.julia}
_1th11s = steiner(m11, _1r11-_1rrud1)
~~~~~~~~~~~~~


~~~~{.julia}
_1θ1s = _1th10+_1th10s+_1th11+_1th11s
simpl(_1θ1s)
~~~~~~~~~~~~~



~~~~{.julia}
N_1θ1s = _1θ1s.subs(m10,m10_).subs(m11,m11_).subs(l10,l10_).subs(l11,l11_);
N_1θ1s.evalf(5)
~~~~~~~~~~~~~





#### 2-es test

~~~~{.julia}
_2th20 = m20*[Sym(1//12)*l2^2 _0 _0;
            _0 _0 _0;
            _0 _0 Sym(1//12)*l2^2]
~~~~~~~~~~~~~




~~~~{.julia}
_2th20s = steiner(m20, _2r2-_2rrud2)
~~~~~~~~~~~~~




~~~~{.julia}
_2thms = steiner(m, _2rm-_2rrud2)
~~~~~~~~~~~~~



~~~~{.julia}
_2θ2s = _2th20+_2th20s+_2thms;
simpl(_2θ2s)
~~~~~~~~~~~~~


~~~~{.julia}
N_2θ2s = _2θ2s.subs(m20,m20_).subs(m,m_).subs(l2,l2_)
N_2θ2s.evalf(5)
~~~~~~~~~~~~~




### Tömegmátrixok

~~~~{.julia}
Hv1 = m1_*permutedims(N0Jrs1)*N0Jrs1;
simpl(Hv1)
~~~~~~~~~~~~~



~~~~{.julia}
Hv2 = m2_*permutedims(N0Jrs2)*N0Jrs2;
simpl(Hv2)
~~~~~~~~~~~~~



~~~~{.julia}
Hω1 = permutedims(_0Jω1nt) * _0R1 * _1θ1s * permutedims(_0R1) * _0Jω1nt
~~~~~~~~~~~~~



~~~~{.julia}
Hω2 = permutedims(_0Jω2nt) * _0R2 * _2θ2s * permutedims(_0R2) * _0Jω2nt;
simpl(Hω2)
~~~~~~~~~~~~~


~~~~{.julia}
H = Hv1+Hv2+Hω1+Hω2;
simpl(H)
~~~~~~~~~~~~~




~~~~{.julia}
simpl(H.subs(m10,m10_).subs(m20,m20_).subs(m11,m11_).subs(m,m_).subs(l11,l11_).subs(l2,l2_)).evalf(5)
~~~~~~~~~~~~~


~~~~{.julia}
H = Hv1+Hv2+Hω1+Hω2;
simpl(H)
~~~~~~~~~~~~~



~~~~{.julia}
simpl(H.subs(m10,m10_).subs(m20,m20_).subs(m11,m11_).subs(m,m_).subs(l11,l11_).subs(l2,l2_).evalf(5))
~~~~~~~~~~~~~



### Kinetikus energia

~~~~{.julia}
T_ = Sym(1//2)*[q1t'(t) q2t'(t)]*H*[q1t'(t),q2t'(t)];
T = T_[1].subs(m10,m10_).subs(m20,m20_).subs(m11,m11_).subs(m,m_).subs(l11,l11_).subs(l2,l2_);
~~~~~~~~~~~~~



~~~~{.julia}
simplify(T.evalf(5))
~~~~~~~~~~~~~



### Potenciális energia

~~~~{.julia}
U_ = m1_*[0 0 g]*_0rrud1[1:3] + m2_*[0 0 g]*_0rrud2[1:3];
U = U_[1].subs(l10,  l10_).subs(g, g_).subs(l2, l2_);
simplify(U).evalf(5)
~~~~~~~~~~~~~



### Másodfajú Lagrange-egyenlet


##### k=1

~~~~{.julia}
deltaT_deltaq1p = simplify(diff(T, q1t'(t)).evalf(5))
~~~~~~~~~~~~~



~~~~{.julia}
d_dt_deltaT_deltaq1p = diff(deltaT_deltaq1p, t)
~~~~~~~~~~~~~



##### k=2

~~~~{.julia}
deltaT_deltaq2p = simplify(diff(T, q2t'(t),t).evalf(5))
~~~~~~~~~~~~~



~~~~{.julia}
deltaT_deltaq2 = simplify(diff(T, q2).evalf(5))
~~~~~~~~~~~~~


~~~~{.julia}
deltaU_deltaq2 = diff(U, q2).evalf(5)
~~~~~~~~~~~~~
